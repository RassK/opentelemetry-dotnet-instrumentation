using System.Text;

namespace Generators;

internal static class RuleEngineMetadataGenerator
{
    internal static string Generate(IList<(string FileName, string FileVersion)> fileInfoList)
    {
        StringBuilder sb = new StringBuilder();
        sb.Append(GetCopyright());
        sb.Append(GetBody(fileInfoList));

        return sb.ToString();
    }

    private static string GetCopyright()
    {
        return @"
// <copyright file=""RuleEngineMetadata.generated.cs"" company=""OpenTelemetry Authors"">
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
".Trim();
    }

    private static string GetBody(IList<(string FileName, string FileVersion)> fileInfoList)
    {
        return $@"
// <auto-generated/>

namespace OpenTelemetry.AutoInstrumentation.RulesEngine;

internal static class RuleEngineMetadata
{{
    public static List<RuleFileInfo> GetFileInfos()
    {{
        return new()
        {{
            {Serialize(fileInfoList)}
        }};
    }}
}}";
    }

    private static string Serialize(IList<(string FileName, string FileVersion)> fileInfoList)
    {
        var sb = new StringBuilder();

        foreach (var fileInfo in fileInfoList)
        {
            sb.Append($@"
            new() {{
                FileName = ""{fileInfo.FileName}"",
                FileVersion = ""{fileInfo.FileVersion}""
            }},
            ");
        }

        return sb.ToString()
            .Trim() // Removes additional whitespace
            .TrimEnd(',');
    }
}
